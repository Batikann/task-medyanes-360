generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Task {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  priority      Priority     @default(LOW)
  createdAt     DateTime     @default(now())
  description   String?
  status        TaskStatus   @default(IN_PROGRESS)
  subtasks      Subtask[]
  comments      Comment[]
  assignedUsers UserOnTask[]
}

model Subtask {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  status    Boolean  @default(false)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
}

model Comment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime      @default(now())
  status    CommentStatus @default(STARTED)
  task      Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String        @db.ObjectId
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  role          UserRole     @default(USER)
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subtasks      Subtask[]
  tasks         UserOnTask[]
  comments      Comment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserOnTask {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  taskId String? @db.ObjectId
  userId String? @db.ObjectId
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum CommentStatus {
  STARTED
  COMPLETED
  IN_PROGRESS
  COMMENTED
  BUG
  ASSIGNED
}

enum TaskStatus {
  COMPLETED_CHECK_PENDING // Durum: proje bitti kontrol bekliyor
  IN_PROGRESS // Durum: çalışma devam ediyor
  UPDATE_PENDING // Durum: güncelleme = güncelleme için bilgi bekliyor
  INFO_REQUEST_PENDING // Durum: bilgi isteği = eksik bilgi olabilir bilgi bekliyor
  CUSTOMER_WAITING // Durum: müşteri bekleme = müşteriden bir dönüş bekliyor olabilir (müşteri kontrolü bekliyor)
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
